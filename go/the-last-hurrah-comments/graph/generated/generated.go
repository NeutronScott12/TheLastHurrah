// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package generated

import (
	"bytes"
	"context"
	"errors"
	"lasthurrah/graph/model"
	"strconv"
	"sync"
	"sync/atomic"

	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"
	gqlparser "github.com/vektah/gqlparser/v2"
	"github.com/vektah/gqlparser/v2/ast"
)

// region    ************************** generated!.gotpl **************************

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	return &executableSchema{
		resolvers:  cfg.Resolvers,
		directives: cfg.Directives,
		complexity: cfg.Complexity,
	}
}

type Config struct {
	Resolvers  ResolverRoot
	Directives DirectiveRoot
	Complexity ComplexityRoot
}

type ResolverRoot interface {
	Mutation() MutationResolver
	Query() QueryResolver
}

type DirectiveRoot struct {
	Extends  func(ctx context.Context, obj interface{}, next graphql.Resolver) (res interface{}, err error)
	External func(ctx context.Context, obj interface{}, next graphql.Resolver) (res interface{}, err error)
	Key      func(ctx context.Context, obj interface{}, next graphql.Resolver, fields string) (res interface{}, err error)
	Provides func(ctx context.Context, obj interface{}, next graphql.Resolver, fields string) (res interface{}, err error)
	Requires func(ctx context.Context, obj interface{}, next graphql.Resolver, fields string) (res interface{}, err error)
}

type ComplexityRoot struct {
	ApplicationModel struct {
		AuthenticatedUsersIds func(childComplexity int) int
		Comments              func(childComplexity int) int
		ID                    func(childComplexity int) int
		ModeratorsIds         func(childComplexity int) int
	}

	CommentAndVoteCountEntity struct {
		CommentCount func(childComplexity int) int
		VoteCount    func(childComplexity int) int
	}

	CommentModel struct {
		ApplicationID      func(childComplexity int) int
		Approved           func(childComplexity int) int
		Author             func(childComplexity int) int
		Count              func(childComplexity int) int
		CreatedAt          func(childComplexity int) int
		Deleted            func(childComplexity int) int
		DownVote           func(childComplexity int) int
		Flagged            func(childComplexity int) int
		ID                 func(childComplexity int) int
		JSONBody           func(childComplexity int) int
		ParentID           func(childComplexity int) int
		Pending            func(childComplexity int) int
		PlainTextBody      func(childComplexity int) int
		PrivateInformation func(childComplexity int) int
		RepliedToID        func(childComplexity int) int
		Replies            func(childComplexity int) int
		Reports            func(childComplexity int) int
		ThreadID           func(childComplexity int) int
		ThreateningContent func(childComplexity int) int
		UpVote             func(childComplexity int) int
		UpdatedAt          func(childComplexity int) int
		UserID             func(childComplexity int) int
	}

	CountModel struct {
		DownVote func(childComplexity int) int
		Replies  func(childComplexity int) int
		UpVote   func(childComplexity int) int
	}

	FetchAllComments struct {
		Comments      func(childComplexity int) int
		CommentsCount func(childComplexity int) int
	}

	FetchCommentByApplicationName struct {
		Comments      func(childComplexity int) int
		CommentsCount func(childComplexity int) int
	}

	FetchCommentByThreadIDResponse struct {
		Comments      func(childComplexity int) int
		CommentsCount func(childComplexity int) int
	}

	FetchCommentsByApplicationID struct {
		Comments      func(childComplexity int) int
		CommentsCount func(childComplexity int) int
	}

	Mutation struct {
		ApproveComments       func(childComplexity int, approveCommentsInput model.ApproveCommentsInput) int
		ChangeCommentSettings func(childComplexity int, changeCommentSettingsInput model.ChangeCommentSettingsInput) int
		CreateComment         func(childComplexity int, createCommentInput model.CreateCommentInput) int
		CreateReplyComment    func(childComplexity int, createReplyCommentInput model.CreateReplyCommentInput) int
		CreateReport          func(childComplexity int, createReportInput model.CreateReportInput) int
		DeleteComment         func(childComplexity int, commentID string) int
		DeleteManyComments    func(childComplexity int, deleteManyCommentsInput model.DeleteManyCommentsInput) int
		DownVoteComment       func(childComplexity int, commentID string) int
		UpVoteComment         func(childComplexity int, commentID string) int
		UpdateComment         func(childComplexity int, updateCommentInput model.UpdateCommentInput) int
	}

	ProfileEntity struct {
		ID              func(childComplexity int) int
		ProfileComments func(childComplexity int) int
	}

	Query struct {
		FetchCommentAndVoteCount            func(childComplexity int, fetchCommentAndVoteCountInput model.FetchCommentAndVoteCountInput) int
		FetchComments                       func(childComplexity int) int
		FetchCommentsByApplicationID        func(childComplexity int, fetchCommentsByApplicationID model.FetchCommentsByApplicationIDInput) int
		FetchCommentsByApplicationShortName func(childComplexity int, fetchCommentsByApplicationShortNameInput model.FetchCommentsByApplicationShortNameInput) int
		FetchCommentsByThreadID             func(childComplexity int, fetchCommentByThreadIDInput model.FetchCommentByThreadIDInput) int
	}

	RatingModel struct {
		AuthorID func(childComplexity int) int
		ID       func(childComplexity int) int
	}

	ReportModel struct {
		CreatedAt func(childComplexity int) int
		ID        func(childComplexity int) int
		Reason    func(childComplexity int) int
		UpdatedAt func(childComplexity int) int
		UserID    func(childComplexity int) int
	}

	StandardResponseModel struct {
		Message func(childComplexity int) int
		Success func(childComplexity int) int
	}

	ThreadModel struct {
		ID                 func(childComplexity int) int
		PinnedComment      func(childComplexity int) int
		PinnedCommentID    func(childComplexity int) int
		SubscribedUsersIds func(childComplexity int) int
		ThreadComments     func(childComplexity int, fetchThreadCommentsBySort model.FetchThreadCommentsBySort, commentsByUserIDInput *model.CommentsByUserIDInput) int
	}

	UserModel struct {
		ID func(childComplexity int) int
	}
}

type MutationResolver interface {
	CreateComment(ctx context.Context, createCommentInput model.CreateCommentInput) (*model.CommentModel, error)
	CreateReplyComment(ctx context.Context, createReplyCommentInput model.CreateReplyCommentInput) (*model.CommentModel, error)
	UpdateComment(ctx context.Context, updateCommentInput model.UpdateCommentInput) (*model.CommentModel, error)
	DeleteComment(ctx context.Context, commentID string) (*model.StandardResponseModel, error)
	DeleteManyComments(ctx context.Context, deleteManyCommentsInput model.DeleteManyCommentsInput) (*model.StandardResponseModel, error)
	ChangeCommentSettings(ctx context.Context, changeCommentSettingsInput model.ChangeCommentSettingsInput) (*model.CommentModel, error)
	UpVoteComment(ctx context.Context, commentID string) (*model.CommentModel, error)
	DownVoteComment(ctx context.Context, commentID string) (*model.CommentModel, error)
	CreateReport(ctx context.Context, createReportInput model.CreateReportInput) (*model.StandardResponseModel, error)
	ApproveComments(ctx context.Context, approveCommentsInput model.ApproveCommentsInput) (*model.StandardResponseModel, error)
}
type QueryResolver interface {
	FetchCommentsByThreadID(ctx context.Context, fetchCommentByThreadIDInput model.FetchCommentByThreadIDInput) (*model.FetchCommentByThreadIDResponse, error)
	FetchCommentsByApplicationID(ctx context.Context, fetchCommentsByApplicationID model.FetchCommentsByApplicationIDInput) (*model.FetchCommentsByApplicationID, error)
	FetchCommentsByApplicationShortName(ctx context.Context, fetchCommentsByApplicationShortNameInput model.FetchCommentsByApplicationShortNameInput) (*model.FetchCommentByApplicationName, error)
	FetchComments(ctx context.Context) (*model.FetchAllComments, error)
	FetchCommentAndVoteCount(ctx context.Context, fetchCommentAndVoteCountInput model.FetchCommentAndVoteCountInput) (*model.CommentAndVoteCountEntity, error)
}

type executableSchema struct {
	resolvers  ResolverRoot
	directives DirectiveRoot
	complexity ComplexityRoot
}

func (e *executableSchema) Schema() *ast.Schema {
	return parsedSchema
}

func (e *executableSchema) Complexity(typeName, field string, childComplexity int, rawArgs map[string]interface{}) (int, bool) {
	ec := executionContext{nil, e}
	_ = ec
	switch typeName + "." + field {

	case "ApplicationModel.authenticated_users_ids":
		if e.complexity.ApplicationModel.AuthenticatedUsersIds == nil {
			break
		}

		return e.complexity.ApplicationModel.AuthenticatedUsersIds(childComplexity), true

	case "ApplicationModel.comments":
		if e.complexity.ApplicationModel.Comments == nil {
			break
		}

		return e.complexity.ApplicationModel.Comments(childComplexity), true

	case "ApplicationModel.id":
		if e.complexity.ApplicationModel.ID == nil {
			break
		}

		return e.complexity.ApplicationModel.ID(childComplexity), true

	case "ApplicationModel.moderators_ids":
		if e.complexity.ApplicationModel.ModeratorsIds == nil {
			break
		}

		return e.complexity.ApplicationModel.ModeratorsIds(childComplexity), true

	case "CommentAndVoteCountEntity.comment_count":
		if e.complexity.CommentAndVoteCountEntity.CommentCount == nil {
			break
		}

		return e.complexity.CommentAndVoteCountEntity.CommentCount(childComplexity), true

	case "CommentAndVoteCountEntity.vote_count":
		if e.complexity.CommentAndVoteCountEntity.VoteCount == nil {
			break
		}

		return e.complexity.CommentAndVoteCountEntity.VoteCount(childComplexity), true

	case "CommentModel.application_id":
		if e.complexity.CommentModel.ApplicationID == nil {
			break
		}

		return e.complexity.CommentModel.ApplicationID(childComplexity), true

	case "CommentModel.approved":
		if e.complexity.CommentModel.Approved == nil {
			break
		}

		return e.complexity.CommentModel.Approved(childComplexity), true

	case "CommentModel.author":
		if e.complexity.CommentModel.Author == nil {
			break
		}

		return e.complexity.CommentModel.Author(childComplexity), true

	case "CommentModel._count":
		if e.complexity.CommentModel.Count == nil {
			break
		}

		return e.complexity.CommentModel.Count(childComplexity), true

	case "CommentModel.created_at":
		if e.complexity.CommentModel.CreatedAt == nil {
			break
		}

		return e.complexity.CommentModel.CreatedAt(childComplexity), true

	case "CommentModel.deleted":
		if e.complexity.CommentModel.Deleted == nil {
			break
		}

		return e.complexity.CommentModel.Deleted(childComplexity), true

	case "CommentModel.down_vote":
		if e.complexity.CommentModel.DownVote == nil {
			break
		}

		return e.complexity.CommentModel.DownVote(childComplexity), true

	case "CommentModel.flagged":
		if e.complexity.CommentModel.Flagged == nil {
			break
		}

		return e.complexity.CommentModel.Flagged(childComplexity), true

	case "CommentModel.ID":
		if e.complexity.CommentModel.ID == nil {
			break
		}

		return e.complexity.CommentModel.ID(childComplexity), true

	case "CommentModel.json_body":
		if e.complexity.CommentModel.JSONBody == nil {
			break
		}

		return e.complexity.CommentModel.JSONBody(childComplexity), true

	case "CommentModel.parent_id":
		if e.complexity.CommentModel.ParentID == nil {
			break
		}

		return e.complexity.CommentModel.ParentID(childComplexity), true

	case "CommentModel.pending":
		if e.complexity.CommentModel.Pending == nil {
			break
		}

		return e.complexity.CommentModel.Pending(childComplexity), true

	case "CommentModel.PlainTextBody":
		if e.complexity.CommentModel.PlainTextBody == nil {
			break
		}

		return e.complexity.CommentModel.PlainTextBody(childComplexity), true

	case "CommentModel.private_information":
		if e.complexity.CommentModel.PrivateInformation == nil {
			break
		}

		return e.complexity.CommentModel.PrivateInformation(childComplexity), true

	case "CommentModel.replied_to_id":
		if e.complexity.CommentModel.RepliedToID == nil {
			break
		}

		return e.complexity.CommentModel.RepliedToID(childComplexity), true

	case "CommentModel.replies":
		if e.complexity.CommentModel.Replies == nil {
			break
		}

		return e.complexity.CommentModel.Replies(childComplexity), true

	case "CommentModel.reports":
		if e.complexity.CommentModel.Reports == nil {
			break
		}

		return e.complexity.CommentModel.Reports(childComplexity), true

	case "CommentModel.thread_id":
		if e.complexity.CommentModel.ThreadID == nil {
			break
		}

		return e.complexity.CommentModel.ThreadID(childComplexity), true

	case "CommentModel.threatening_content":
		if e.complexity.CommentModel.ThreateningContent == nil {
			break
		}

		return e.complexity.CommentModel.ThreateningContent(childComplexity), true

	case "CommentModel.up_vote":
		if e.complexity.CommentModel.UpVote == nil {
			break
		}

		return e.complexity.CommentModel.UpVote(childComplexity), true

	case "CommentModel.updated_at":
		if e.complexity.CommentModel.UpdatedAt == nil {
			break
		}

		return e.complexity.CommentModel.UpdatedAt(childComplexity), true

	case "CommentModel.user_id":
		if e.complexity.CommentModel.UserID == nil {
			break
		}

		return e.complexity.CommentModel.UserID(childComplexity), true

	case "CountModel.down_vote":
		if e.complexity.CountModel.DownVote == nil {
			break
		}

		return e.complexity.CountModel.DownVote(childComplexity), true

	case "CountModel.replies":
		if e.complexity.CountModel.Replies == nil {
			break
		}

		return e.complexity.CountModel.Replies(childComplexity), true

	case "CountModel.up_vote":
		if e.complexity.CountModel.UpVote == nil {
			break
		}

		return e.complexity.CountModel.UpVote(childComplexity), true

	case "FetchAllComments.Comments":
		if e.complexity.FetchAllComments.Comments == nil {
			break
		}

		return e.complexity.FetchAllComments.Comments(childComplexity), true

	case "FetchAllComments.CommentsCount":
		if e.complexity.FetchAllComments.CommentsCount == nil {
			break
		}

		return e.complexity.FetchAllComments.CommentsCount(childComplexity), true

	case "FetchCommentByApplicationName.comments":
		if e.complexity.FetchCommentByApplicationName.Comments == nil {
			break
		}

		return e.complexity.FetchCommentByApplicationName.Comments(childComplexity), true

	case "FetchCommentByApplicationName.comments_count":
		if e.complexity.FetchCommentByApplicationName.CommentsCount == nil {
			break
		}

		return e.complexity.FetchCommentByApplicationName.CommentsCount(childComplexity), true

	case "FetchCommentByThreadIdResponse.comments":
		if e.complexity.FetchCommentByThreadIDResponse.Comments == nil {
			break
		}

		return e.complexity.FetchCommentByThreadIDResponse.Comments(childComplexity), true

	case "FetchCommentByThreadIdResponse.comments_count":
		if e.complexity.FetchCommentByThreadIDResponse.CommentsCount == nil {
			break
		}

		return e.complexity.FetchCommentByThreadIDResponse.CommentsCount(childComplexity), true

	case "FetchCommentsByApplicationId.comments":
		if e.complexity.FetchCommentsByApplicationID.Comments == nil {
			break
		}

		return e.complexity.FetchCommentsByApplicationID.Comments(childComplexity), true

	case "FetchCommentsByApplicationId.comments_count":
		if e.complexity.FetchCommentsByApplicationID.CommentsCount == nil {
			break
		}

		return e.complexity.FetchCommentsByApplicationID.CommentsCount(childComplexity), true

	case "Mutation.approve_comments":
		if e.complexity.Mutation.ApproveComments == nil {
			break
		}

		args, err := ec.field_Mutation_approve_comments_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ApproveComments(childComplexity, args["approveCommentsInput"].(model.ApproveCommentsInput)), true

	case "Mutation.change_comment_settings":
		if e.complexity.Mutation.ChangeCommentSettings == nil {
			break
		}

		args, err := ec.field_Mutation_change_comment_settings_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ChangeCommentSettings(childComplexity, args["ChangeCommentSettingsInput"].(model.ChangeCommentSettingsInput)), true

	case "Mutation.create_comment":
		if e.complexity.Mutation.CreateComment == nil {
			break
		}

		args, err := ec.field_Mutation_create_comment_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateComment(childComplexity, args["CreateCommentInput"].(model.CreateCommentInput)), true

	case "Mutation.create_reply_comment":
		if e.complexity.Mutation.CreateReplyComment == nil {
			break
		}

		args, err := ec.field_Mutation_create_reply_comment_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateReplyComment(childComplexity, args["CreateReplyCommentInput"].(model.CreateReplyCommentInput)), true

	case "Mutation.create_report":
		if e.complexity.Mutation.CreateReport == nil {
			break
		}

		args, err := ec.field_Mutation_create_report_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateReport(childComplexity, args["createReportInput"].(model.CreateReportInput)), true

	case "Mutation.delete_comment":
		if e.complexity.Mutation.DeleteComment == nil {
			break
		}

		args, err := ec.field_Mutation_delete_comment_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteComment(childComplexity, args["commentId"].(string)), true

	case "Mutation.delete_many_comments":
		if e.complexity.Mutation.DeleteManyComments == nil {
			break
		}

		args, err := ec.field_Mutation_delete_many_comments_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteManyComments(childComplexity, args["deleteManyCommentsInput"].(model.DeleteManyCommentsInput)), true

	case "Mutation.down_vote_comment":
		if e.complexity.Mutation.DownVoteComment == nil {
			break
		}

		args, err := ec.field_Mutation_down_vote_comment_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DownVoteComment(childComplexity, args["comment_id"].(string)), true

	case "Mutation.up_vote_comment":
		if e.complexity.Mutation.UpVoteComment == nil {
			break
		}

		args, err := ec.field_Mutation_up_vote_comment_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpVoteComment(childComplexity, args["comment_id"].(string)), true

	case "Mutation.update_comment":
		if e.complexity.Mutation.UpdateComment == nil {
			break
		}

		args, err := ec.field_Mutation_update_comment_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateComment(childComplexity, args["UpdateCommentInput"].(model.UpdateCommentInput)), true

	case "ProfileEntity.id":
		if e.complexity.ProfileEntity.ID == nil {
			break
		}

		return e.complexity.ProfileEntity.ID(childComplexity), true

	case "ProfileEntity.profile_comments":
		if e.complexity.ProfileEntity.ProfileComments == nil {
			break
		}

		return e.complexity.ProfileEntity.ProfileComments(childComplexity), true

	case "Query.fetch_comment_and_vote_count":
		if e.complexity.Query.FetchCommentAndVoteCount == nil {
			break
		}

		args, err := ec.field_Query_fetch_comment_and_vote_count_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FetchCommentAndVoteCount(childComplexity, args["fetchCommentAndVoteCountInput"].(model.FetchCommentAndVoteCountInput)), true

	case "Query.fetch_comments":
		if e.complexity.Query.FetchComments == nil {
			break
		}

		return e.complexity.Query.FetchComments(childComplexity), true

	case "Query.fetch_comments_by_application_id":
		if e.complexity.Query.FetchCommentsByApplicationID == nil {
			break
		}

		args, err := ec.field_Query_fetch_comments_by_application_id_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FetchCommentsByApplicationID(childComplexity, args["fetchCommentsByApplicationId"].(model.FetchCommentsByApplicationIDInput)), true

	case "Query.fetch_comments_by_application_short_name":
		if e.complexity.Query.FetchCommentsByApplicationShortName == nil {
			break
		}

		args, err := ec.field_Query_fetch_comments_by_application_short_name_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FetchCommentsByApplicationShortName(childComplexity, args["fetchCommentsByApplicationShortNameInput"].(model.FetchCommentsByApplicationShortNameInput)), true

	case "Query.fetch_comments_by_thread_id":
		if e.complexity.Query.FetchCommentsByThreadID == nil {
			break
		}

		args, err := ec.field_Query_fetch_comments_by_thread_id_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FetchCommentsByThreadID(childComplexity, args["fetchCommentByThreadIdInput"].(model.FetchCommentByThreadIDInput)), true

	case "RatingModel.author_id":
		if e.complexity.RatingModel.AuthorID == nil {
			break
		}

		return e.complexity.RatingModel.AuthorID(childComplexity), true

	case "RatingModel.id":
		if e.complexity.RatingModel.ID == nil {
			break
		}

		return e.complexity.RatingModel.ID(childComplexity), true

	case "ReportModel.created_at":
		if e.complexity.ReportModel.CreatedAt == nil {
			break
		}

		return e.complexity.ReportModel.CreatedAt(childComplexity), true

	case "ReportModel.id":
		if e.complexity.ReportModel.ID == nil {
			break
		}

		return e.complexity.ReportModel.ID(childComplexity), true

	case "ReportModel.reason":
		if e.complexity.ReportModel.Reason == nil {
			break
		}

		return e.complexity.ReportModel.Reason(childComplexity), true

	case "ReportModel.updated_at":
		if e.complexity.ReportModel.UpdatedAt == nil {
			break
		}

		return e.complexity.ReportModel.UpdatedAt(childComplexity), true

	case "ReportModel.user_id":
		if e.complexity.ReportModel.UserID == nil {
			break
		}

		return e.complexity.ReportModel.UserID(childComplexity), true

	case "StandardResponseModel.message":
		if e.complexity.StandardResponseModel.Message == nil {
			break
		}

		return e.complexity.StandardResponseModel.Message(childComplexity), true

	case "StandardResponseModel.success":
		if e.complexity.StandardResponseModel.Success == nil {
			break
		}

		return e.complexity.StandardResponseModel.Success(childComplexity), true

	case "ThreadModel.id":
		if e.complexity.ThreadModel.ID == nil {
			break
		}

		return e.complexity.ThreadModel.ID(childComplexity), true

	case "ThreadModel.pinned_comment":
		if e.complexity.ThreadModel.PinnedComment == nil {
			break
		}

		return e.complexity.ThreadModel.PinnedComment(childComplexity), true

	case "ThreadModel.pinned_comment_id":
		if e.complexity.ThreadModel.PinnedCommentID == nil {
			break
		}

		return e.complexity.ThreadModel.PinnedCommentID(childComplexity), true

	case "ThreadModel.subscribed_users_ids":
		if e.complexity.ThreadModel.SubscribedUsersIds == nil {
			break
		}

		return e.complexity.ThreadModel.SubscribedUsersIds(childComplexity), true

	case "ThreadModel.thread_comments":
		if e.complexity.ThreadModel.ThreadComments == nil {
			break
		}

		args, err := ec.field_ThreadModel_thread_comments_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.ThreadModel.ThreadComments(childComplexity, args["fetchThreadCommentsBySort"].(model.FetchThreadCommentsBySort), args["commentsByUserIdInput"].(*model.CommentsByUserIDInput)), true

	case "UserModel.id":
		if e.complexity.UserModel.ID == nil {
			break
		}

		return e.complexity.UserModel.ID(childComplexity), true

	}
	return 0, false
}

func (e *executableSchema) Exec(ctx context.Context) graphql.ResponseHandler {
	rc := graphql.GetOperationContext(ctx)
	ec := executionContext{rc, e}
	first := true

	switch rc.Operation.Operation {
	case ast.Query:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			data := ec._Query(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}
	case ast.Mutation:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			data := ec._Mutation(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}

	default:
		return graphql.OneShot(graphql.ErrorResponse(ctx, "unsupported GraphQL operation"))
	}
}

type executionContext struct {
	*graphql.OperationContext
	*executableSchema
}

func (ec *executionContext) introspectSchema() (*introspection.Schema, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapSchema(parsedSchema), nil
}

func (ec *executionContext) introspectType(name string) (*introspection.Type, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapTypeFromDef(parsedSchema, parsedSchema.Types[name]), nil
}

var sources = []*ast.Source{
	{Name: "graph/schema.graphqls", Input: `# GraphQL schema example
#
# https://gqlgen.com/getting-started/

directive @key(fields: String!) on OBJECT | INTERFACE

directive @extends on OBJECT | INTERFACE

directive @external on OBJECT | FIELD_DEFINITION

directive @requires(fields: String!) on FIELD_DEFINITION

directive @provides(fields: String!) on FIELD_DEFINITION

type CountModel {
    up_vote: Int!
    down_vote: Int!
    replies: Int!
}

type RatingModel {
    id: String!
    author_id: String!
}

type ReportModel {
    id: String!
    user_id: String!
    reason: REPORT_REASON!
    created_at: DateTime!
    updated_at: DateTime!
}

enum REPORT_REASON {
    DISAGREE
    SPAM
    INAPPROPRIATE_PROFILE
    THREATENING_CONTENT
    PRIVATE_INFORMATION
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type UserModel {
    id: String!
}

type CommentModel {
    ID: String!
    created_at: DateTime!
    updated_at: DateTime!
    author: UserModel!
    thread_id: String!
    parent_id: String
    PlainTextBody: String!
    json_body: [JSON!]!
    up_vote: [RatingModel!]!
    down_vote: [RatingModel!]!
    threatening_content: Boolean!
    private_information: Boolean!
    deleted: Boolean!
    flagged: Boolean!
    pending: Boolean!
    approved: Boolean!
    replied_to_id: String
    user_id: String!
    application_id: String!
    reports: [ReportModel!]!
    replies: [CommentModel!]!
    _count: CountModel!
}

"""
The ` + "`" + `JSONObject` + "`" + ` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

type FetchAllComments {
    CommentsCount: Int!
    Comments: [CommentModel!]!
}

type FetchCommentByThreadIdResponse {
    comments_count: Float!
    comments: [CommentModel!]!
}

type StandardResponseModel {
    success: Boolean!
    message: String!
}

type FetchCommentsByApplicationId {
    comments_count: Float!
    comments: [CommentModel!]!
}

type FetchCommentByApplicationName {
    comments_count: Float!
    comments: [CommentModel!]!
}

type ApplicationModel {
    id: String!
    moderators_ids: [String!]!
    authenticated_users_ids: [String!]!
    comments: [CommentModel!]!
}

type ThreadModel {
    """
    UUID for Thread
    """
    id: String!
    pinned_comment_id: String
    subscribed_users_ids: [String!]!
    pinned_comment: CommentModel
    thread_comments(
        fetchThreadCommentsBySort: FetchThreadCommentsBySort!
        commentsByUserIdInput: CommentsByUserIdInput
    ): FetchCommentByThreadIdResponse!
}

input FetchThreadCommentsBySort {
    limit: Int!
    skip: Int!
    sort: sort
}

enum sort {
    ASC
    DESC
    TOP_VOTES
}

input CommentsByUserIdInput {
    user_id: String
}

type CommentAndVoteCountEntity {
    comment_count: Int!
    vote_count: Int!
}

type ProfileEntity {
    id: String!
    profile_comments: [CommentModel!]!
}

type Query {
    fetch_comments_by_thread_id(
        fetchCommentByThreadIdInput: FetchCommentByThreadIdInput!
    ): FetchCommentByThreadIdResponse!
    fetch_comments_by_application_id(
        fetchCommentsByApplicationId: FetchCommentsByApplicationIdInput!
    ): FetchCommentsByApplicationId!
    fetch_comments_by_application_short_name(
        fetchCommentsByApplicationShortNameInput: FetchCommentsByApplicationShortNameInput!
    ): FetchCommentByApplicationName!
    fetch_comments: FetchAllComments!
    fetch_comment_and_vote_count(
        fetchCommentAndVoteCountInput: FetchCommentAndVoteCountInput!
    ): CommentAndVoteCountEntity!
}

input FetchCommentByThreadIdInput {
    limit: Int!
    skip: Int!
    sort: sort!
    thread_id: String!
    application_short_name: String!
}

input FetchCommentsByApplicationIdInput {
    limit: Int!
    skip: Int!
    sort: sort
    application_short_name: String!
    application_id: String!
}

input FetchCommentsByApplicationShortNameInput {
    limit: Int!
    skip: Int!
    sort: sort
    application_short_name: String!
    where: where!
}

enum where {
    PENDING
    APPOVED
    SPAM
    DELETED
    ALL
}

input FetchCommentAndVoteCountInput {
    user_id: String!
}

type Mutation {
    create_comment(CreateCommentInput: CreateCommentInput!): CommentModel!
    create_reply_comment(
        CreateReplyCommentInput: CreateReplyCommentInput!
    ): CommentModel!
    update_comment(UpdateCommentInput: UpdateCommentInput!): CommentModel!
    delete_comment(commentId: String!): StandardResponseModel!
    delete_many_comments(
        deleteManyCommentsInput: DeleteManyCommentsInput!
    ): StandardResponseModel!
    change_comment_settings(
        ChangeCommentSettingsInput: ChangeCommentSettingsInput!
    ): CommentModel!
    up_vote_comment(comment_id: String!): CommentModel!
    down_vote_comment(comment_id: String!): CommentModel!
    create_report(createReportInput: CreateReportInput!): StandardResponseModel!
    approve_comments(
        approveCommentsInput: ApproveCommentsInput!
    ): StandardResponseModel!
}

input CreateCommentInput {
    plain_text_body: String!
    json_body: JSON!
    application_id: String!
    thread_id: String!
}

input CreateReplyCommentInput {
    plain_text_body: String!
    json_body: JSON!
    application_id: String!
    thread_id: String!
    parent_id: String!
    replied_to_id: String!
}

input UpdateCommentInput {
    plain_text_body: String!
    json_body: JSON!
    comment_id: String!
}

input DeleteManyCommentsInput {
    comment_ids: [String!]!
    permanent_delete: Boolean!
}

input ChangeCommentSettingsInput {
    comment_id: String!
    reply_notification: Boolean!
}

input CreateReportInput {
    comment_id: String!
    report: REPORT_REASON!
}

input ApproveCommentsInput {
    comment_ids: [String!]!
}
`, BuiltIn: false},
}
var parsedSchema = gqlparser.MustLoadSchema(sources...)

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

func (ec *executionContext) dir_key_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["fields"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fields"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["fields"] = arg0
	return args, nil
}

func (ec *executionContext) dir_provides_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["fields"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fields"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["fields"] = arg0
	return args, nil
}

func (ec *executionContext) dir_requires_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["fields"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fields"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["fields"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_approve_comments_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.ApproveCommentsInput
	if tmp, ok := rawArgs["approveCommentsInput"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approveCommentsInput"))
		arg0, err = ec.unmarshalNApproveCommentsInput2lasthurrahᚋgraphᚋmodelᚐApproveCommentsInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["approveCommentsInput"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_change_comment_settings_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.ChangeCommentSettingsInput
	if tmp, ok := rawArgs["ChangeCommentSettingsInput"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ChangeCommentSettingsInput"))
		arg0, err = ec.unmarshalNChangeCommentSettingsInput2lasthurrahᚋgraphᚋmodelᚐChangeCommentSettingsInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["ChangeCommentSettingsInput"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_create_comment_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.CreateCommentInput
	if tmp, ok := rawArgs["CreateCommentInput"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("CreateCommentInput"))
		arg0, err = ec.unmarshalNCreateCommentInput2lasthurrahᚋgraphᚋmodelᚐCreateCommentInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["CreateCommentInput"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_create_reply_comment_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.CreateReplyCommentInput
	if tmp, ok := rawArgs["CreateReplyCommentInput"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("CreateReplyCommentInput"))
		arg0, err = ec.unmarshalNCreateReplyCommentInput2lasthurrahᚋgraphᚋmodelᚐCreateReplyCommentInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["CreateReplyCommentInput"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_create_report_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.CreateReportInput
	if tmp, ok := rawArgs["createReportInput"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createReportInput"))
		arg0, err = ec.unmarshalNCreateReportInput2lasthurrahᚋgraphᚋmodelᚐCreateReportInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["createReportInput"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_comment_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["commentId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("commentId"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["commentId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_many_comments_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.DeleteManyCommentsInput
	if tmp, ok := rawArgs["deleteManyCommentsInput"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleteManyCommentsInput"))
		arg0, err = ec.unmarshalNDeleteManyCommentsInput2lasthurrahᚋgraphᚋmodelᚐDeleteManyCommentsInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["deleteManyCommentsInput"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_down_vote_comment_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["comment_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("comment_id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["comment_id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_up_vote_comment_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["comment_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("comment_id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["comment_id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_update_comment_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.UpdateCommentInput
	if tmp, ok := rawArgs["UpdateCommentInput"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("UpdateCommentInput"))
		arg0, err = ec.unmarshalNUpdateCommentInput2lasthurrahᚋgraphᚋmodelᚐUpdateCommentInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["UpdateCommentInput"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query___type_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_fetch_comment_and_vote_count_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.FetchCommentAndVoteCountInput
	if tmp, ok := rawArgs["fetchCommentAndVoteCountInput"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fetchCommentAndVoteCountInput"))
		arg0, err = ec.unmarshalNFetchCommentAndVoteCountInput2lasthurrahᚋgraphᚋmodelᚐFetchCommentAndVoteCountInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["fetchCommentAndVoteCountInput"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_fetch_comments_by_application_id_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.FetchCommentsByApplicationIDInput
	if tmp, ok := rawArgs["fetchCommentsByApplicationId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fetchCommentsByApplicationId"))
		arg0, err = ec.unmarshalNFetchCommentsByApplicationIdInput2lasthurrahᚋgraphᚋmodelᚐFetchCommentsByApplicationIDInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["fetchCommentsByApplicationId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_fetch_comments_by_application_short_name_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.FetchCommentsByApplicationShortNameInput
	if tmp, ok := rawArgs["fetchCommentsByApplicationShortNameInput"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fetchCommentsByApplicationShortNameInput"))
		arg0, err = ec.unmarshalNFetchCommentsByApplicationShortNameInput2lasthurrahᚋgraphᚋmodelᚐFetchCommentsByApplicationShortNameInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["fetchCommentsByApplicationShortNameInput"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_fetch_comments_by_thread_id_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.FetchCommentByThreadIDInput
	if tmp, ok := rawArgs["fetchCommentByThreadIdInput"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fetchCommentByThreadIdInput"))
		arg0, err = ec.unmarshalNFetchCommentByThreadIdInput2lasthurrahᚋgraphᚋmodelᚐFetchCommentByThreadIDInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["fetchCommentByThreadIdInput"] = arg0
	return args, nil
}

func (ec *executionContext) field_ThreadModel_thread_comments_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.FetchThreadCommentsBySort
	if tmp, ok := rawArgs["fetchThreadCommentsBySort"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fetchThreadCommentsBySort"))
		arg0, err = ec.unmarshalNFetchThreadCommentsBySort2lasthurrahᚋgraphᚋmodelᚐFetchThreadCommentsBySort(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["fetchThreadCommentsBySort"] = arg0
	var arg1 *model.CommentsByUserIDInput
	if tmp, ok := rawArgs["commentsByUserIdInput"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("commentsByUserIdInput"))
		arg1, err = ec.unmarshalOCommentsByUserIdInput2ᚖlasthurrahᚋgraphᚋmodelᚐCommentsByUserIDInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["commentsByUserIdInput"] = arg1
	return args, nil
}

func (ec *executionContext) field___Type_enumValues_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_fields_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _ApplicationModel_id(ctx context.Context, field graphql.CollectedField, obj *model.ApplicationModel) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ApplicationModel",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ApplicationModel_moderators_ids(ctx context.Context, field graphql.CollectedField, obj *model.ApplicationModel) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ApplicationModel",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModeratorsIds, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _ApplicationModel_authenticated_users_ids(ctx context.Context, field graphql.CollectedField, obj *model.ApplicationModel) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ApplicationModel",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AuthenticatedUsersIds, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _ApplicationModel_comments(ctx context.Context, field graphql.CollectedField, obj *model.ApplicationModel) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ApplicationModel",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Comments, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.CommentModel)
	fc.Result = res
	return ec.marshalNCommentModel2ᚕᚖlasthurrahᚋgraphᚋmodelᚐCommentModelᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _CommentAndVoteCountEntity_comment_count(ctx context.Context, field graphql.CollectedField, obj *model.CommentAndVoteCountEntity) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CommentAndVoteCountEntity",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CommentCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _CommentAndVoteCountEntity_vote_count(ctx context.Context, field graphql.CollectedField, obj *model.CommentAndVoteCountEntity) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CommentAndVoteCountEntity",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VoteCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _CommentModel_ID(ctx context.Context, field graphql.CollectedField, obj *model.CommentModel) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CommentModel",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _CommentModel_created_at(ctx context.Context, field graphql.CollectedField, obj *model.CommentModel) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CommentModel",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNDateTime2string(ctx, field.Selections, res)
}

func (ec *executionContext) _CommentModel_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.CommentModel) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CommentModel",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNDateTime2string(ctx, field.Selections, res)
}

func (ec *executionContext) _CommentModel_author(ctx context.Context, field graphql.CollectedField, obj *model.CommentModel) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CommentModel",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Author, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.UserModel)
	fc.Result = res
	return ec.marshalNUserModel2ᚖlasthurrahᚋgraphᚋmodelᚐUserModel(ctx, field.Selections, res)
}

func (ec *executionContext) _CommentModel_thread_id(ctx context.Context, field graphql.CollectedField, obj *model.CommentModel) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CommentModel",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ThreadID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _CommentModel_parent_id(ctx context.Context, field graphql.CollectedField, obj *model.CommentModel) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CommentModel",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ParentID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _CommentModel_PlainTextBody(ctx context.Context, field graphql.CollectedField, obj *model.CommentModel) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CommentModel",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PlainTextBody, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _CommentModel_json_body(ctx context.Context, field graphql.CollectedField, obj *model.CommentModel) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CommentModel",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.JSONBody, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNJSON2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _CommentModel_up_vote(ctx context.Context, field graphql.CollectedField, obj *model.CommentModel) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CommentModel",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpVote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.RatingModel)
	fc.Result = res
	return ec.marshalNRatingModel2ᚕᚖlasthurrahᚋgraphᚋmodelᚐRatingModelᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _CommentModel_down_vote(ctx context.Context, field graphql.CollectedField, obj *model.CommentModel) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CommentModel",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DownVote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.RatingModel)
	fc.Result = res
	return ec.marshalNRatingModel2ᚕᚖlasthurrahᚋgraphᚋmodelᚐRatingModelᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _CommentModel_threatening_content(ctx context.Context, field graphql.CollectedField, obj *model.CommentModel) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CommentModel",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ThreateningContent, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _CommentModel_private_information(ctx context.Context, field graphql.CollectedField, obj *model.CommentModel) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CommentModel",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PrivateInformation, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _CommentModel_deleted(ctx context.Context, field graphql.CollectedField, obj *model.CommentModel) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CommentModel",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Deleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _CommentModel_flagged(ctx context.Context, field graphql.CollectedField, obj *model.CommentModel) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CommentModel",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Flagged, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _CommentModel_pending(ctx context.Context, field graphql.CollectedField, obj *model.CommentModel) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CommentModel",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Pending, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _CommentModel_approved(ctx context.Context, field graphql.CollectedField, obj *model.CommentModel) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CommentModel",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Approved, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _CommentModel_replied_to_id(ctx context.Context, field graphql.CollectedField, obj *model.CommentModel) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CommentModel",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RepliedToID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _CommentModel_user_id(ctx context.Context, field graphql.CollectedField, obj *model.CommentModel) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CommentModel",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _CommentModel_application_id(ctx context.Context, field graphql.CollectedField, obj *model.CommentModel) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CommentModel",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ApplicationID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _CommentModel_reports(ctx context.Context, field graphql.CollectedField, obj *model.CommentModel) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CommentModel",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Reports, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.ReportModel)
	fc.Result = res
	return ec.marshalNReportModel2ᚕᚖlasthurrahᚋgraphᚋmodelᚐReportModelᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _CommentModel_replies(ctx context.Context, field graphql.CollectedField, obj *model.CommentModel) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CommentModel",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Replies, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.CommentModel)
	fc.Result = res
	return ec.marshalNCommentModel2ᚕᚖlasthurrahᚋgraphᚋmodelᚐCommentModelᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _CommentModel__count(ctx context.Context, field graphql.CollectedField, obj *model.CommentModel) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CommentModel",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.CountModel)
	fc.Result = res
	return ec.marshalNCountModel2ᚖlasthurrahᚋgraphᚋmodelᚐCountModel(ctx, field.Selections, res)
}

func (ec *executionContext) _CountModel_up_vote(ctx context.Context, field graphql.CollectedField, obj *model.CountModel) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CountModel",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpVote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _CountModel_down_vote(ctx context.Context, field graphql.CollectedField, obj *model.CountModel) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CountModel",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DownVote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _CountModel_replies(ctx context.Context, field graphql.CollectedField, obj *model.CountModel) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CountModel",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Replies, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _FetchAllComments_CommentsCount(ctx context.Context, field graphql.CollectedField, obj *model.FetchAllComments) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FetchAllComments",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CommentsCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _FetchAllComments_Comments(ctx context.Context, field graphql.CollectedField, obj *model.FetchAllComments) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FetchAllComments",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Comments, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.CommentModel)
	fc.Result = res
	return ec.marshalNCommentModel2ᚕᚖlasthurrahᚋgraphᚋmodelᚐCommentModelᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _FetchCommentByApplicationName_comments_count(ctx context.Context, field graphql.CollectedField, obj *model.FetchCommentByApplicationName) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FetchCommentByApplicationName",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CommentsCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) _FetchCommentByApplicationName_comments(ctx context.Context, field graphql.CollectedField, obj *model.FetchCommentByApplicationName) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FetchCommentByApplicationName",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Comments, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.CommentModel)
	fc.Result = res
	return ec.marshalNCommentModel2ᚕᚖlasthurrahᚋgraphᚋmodelᚐCommentModelᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _FetchCommentByThreadIdResponse_comments_count(ctx context.Context, field graphql.CollectedField, obj *model.FetchCommentByThreadIDResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FetchCommentByThreadIdResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CommentsCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) _FetchCommentByThreadIdResponse_comments(ctx context.Context, field graphql.CollectedField, obj *model.FetchCommentByThreadIDResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FetchCommentByThreadIdResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Comments, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.CommentModel)
	fc.Result = res
	return ec.marshalNCommentModel2ᚕᚖlasthurrahᚋgraphᚋmodelᚐCommentModelᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _FetchCommentsByApplicationId_comments_count(ctx context.Context, field graphql.CollectedField, obj *model.FetchCommentsByApplicationID) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FetchCommentsByApplicationId",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CommentsCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) _FetchCommentsByApplicationId_comments(ctx context.Context, field graphql.CollectedField, obj *model.FetchCommentsByApplicationID) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FetchCommentsByApplicationId",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Comments, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.CommentModel)
	fc.Result = res
	return ec.marshalNCommentModel2ᚕᚖlasthurrahᚋgraphᚋmodelᚐCommentModelᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_create_comment(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_create_comment_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateComment(rctx, args["CreateCommentInput"].(model.CreateCommentInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.CommentModel)
	fc.Result = res
	return ec.marshalNCommentModel2ᚖlasthurrahᚋgraphᚋmodelᚐCommentModel(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_create_reply_comment(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_create_reply_comment_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateReplyComment(rctx, args["CreateReplyCommentInput"].(model.CreateReplyCommentInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.CommentModel)
	fc.Result = res
	return ec.marshalNCommentModel2ᚖlasthurrahᚋgraphᚋmodelᚐCommentModel(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_comment(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_comment_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateComment(rctx, args["UpdateCommentInput"].(model.UpdateCommentInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.CommentModel)
	fc.Result = res
	return ec.marshalNCommentModel2ᚖlasthurrahᚋgraphᚋmodelᚐCommentModel(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_comment(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_comment_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteComment(rctx, args["commentId"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.StandardResponseModel)
	fc.Result = res
	return ec.marshalNStandardResponseModel2ᚖlasthurrahᚋgraphᚋmodelᚐStandardResponseModel(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_many_comments(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_many_comments_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteManyComments(rctx, args["deleteManyCommentsInput"].(model.DeleteManyCommentsInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.StandardResponseModel)
	fc.Result = res
	return ec.marshalNStandardResponseModel2ᚖlasthurrahᚋgraphᚋmodelᚐStandardResponseModel(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_change_comment_settings(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_change_comment_settings_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ChangeCommentSettings(rctx, args["ChangeCommentSettingsInput"].(model.ChangeCommentSettingsInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.CommentModel)
	fc.Result = res
	return ec.marshalNCommentModel2ᚖlasthurrahᚋgraphᚋmodelᚐCommentModel(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_up_vote_comment(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_up_vote_comment_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpVoteComment(rctx, args["comment_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.CommentModel)
	fc.Result = res
	return ec.marshalNCommentModel2ᚖlasthurrahᚋgraphᚋmodelᚐCommentModel(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_down_vote_comment(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_down_vote_comment_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DownVoteComment(rctx, args["comment_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.CommentModel)
	fc.Result = res
	return ec.marshalNCommentModel2ᚖlasthurrahᚋgraphᚋmodelᚐCommentModel(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_create_report(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_create_report_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateReport(rctx, args["createReportInput"].(model.CreateReportInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.StandardResponseModel)
	fc.Result = res
	return ec.marshalNStandardResponseModel2ᚖlasthurrahᚋgraphᚋmodelᚐStandardResponseModel(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_approve_comments(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_approve_comments_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ApproveComments(rctx, args["approveCommentsInput"].(model.ApproveCommentsInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.StandardResponseModel)
	fc.Result = res
	return ec.marshalNStandardResponseModel2ᚖlasthurrahᚋgraphᚋmodelᚐStandardResponseModel(ctx, field.Selections, res)
}

func (ec *executionContext) _ProfileEntity_id(ctx context.Context, field graphql.CollectedField, obj *model.ProfileEntity) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProfileEntity",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ProfileEntity_profile_comments(ctx context.Context, field graphql.CollectedField, obj *model.ProfileEntity) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProfileEntity",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProfileComments, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.CommentModel)
	fc.Result = res
	return ec.marshalNCommentModel2ᚕᚖlasthurrahᚋgraphᚋmodelᚐCommentModelᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_fetch_comments_by_thread_id(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_fetch_comments_by_thread_id_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().FetchCommentsByThreadID(rctx, args["fetchCommentByThreadIdInput"].(model.FetchCommentByThreadIDInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.FetchCommentByThreadIDResponse)
	fc.Result = res
	return ec.marshalNFetchCommentByThreadIdResponse2ᚖlasthurrahᚋgraphᚋmodelᚐFetchCommentByThreadIDResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_fetch_comments_by_application_id(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_fetch_comments_by_application_id_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().FetchCommentsByApplicationID(rctx, args["fetchCommentsByApplicationId"].(model.FetchCommentsByApplicationIDInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.FetchCommentsByApplicationID)
	fc.Result = res
	return ec.marshalNFetchCommentsByApplicationId2ᚖlasthurrahᚋgraphᚋmodelᚐFetchCommentsByApplicationID(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_fetch_comments_by_application_short_name(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_fetch_comments_by_application_short_name_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().FetchCommentsByApplicationShortName(rctx, args["fetchCommentsByApplicationShortNameInput"].(model.FetchCommentsByApplicationShortNameInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.FetchCommentByApplicationName)
	fc.Result = res
	return ec.marshalNFetchCommentByApplicationName2ᚖlasthurrahᚋgraphᚋmodelᚐFetchCommentByApplicationName(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_fetch_comments(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().FetchComments(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.FetchAllComments)
	fc.Result = res
	return ec.marshalNFetchAllComments2ᚖlasthurrahᚋgraphᚋmodelᚐFetchAllComments(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_fetch_comment_and_vote_count(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_fetch_comment_and_vote_count_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().FetchCommentAndVoteCount(rctx, args["fetchCommentAndVoteCountInput"].(model.FetchCommentAndVoteCountInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.CommentAndVoteCountEntity)
	fc.Result = res
	return ec.marshalNCommentAndVoteCountEntity2ᚖlasthurrahᚋgraphᚋmodelᚐCommentAndVoteCountEntity(ctx, field.Selections, res)
}

func (ec *executionContext) _Query___type(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query___type_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectType(args["name"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) _Query___schema(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectSchema()
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Schema)
	fc.Result = res
	return ec.marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx, field.Selections, res)
}

func (ec *executionContext) _RatingModel_id(ctx context.Context, field graphql.CollectedField, obj *model.RatingModel) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RatingModel",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _RatingModel_author_id(ctx context.Context, field graphql.CollectedField, obj *model.RatingModel) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RatingModel",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AuthorID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ReportModel_id(ctx context.Context, field graphql.CollectedField, obj *model.ReportModel) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ReportModel",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ReportModel_user_id(ctx context.Context, field graphql.CollectedField, obj *model.ReportModel) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ReportModel",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ReportModel_reason(ctx context.Context, field graphql.CollectedField, obj *model.ReportModel) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ReportModel",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Reason, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.ReportReason)
	fc.Result = res
	return ec.marshalNREPORT_REASON2lasthurrahᚋgraphᚋmodelᚐReportReason(ctx, field.Selections, res)
}

func (ec *executionContext) _ReportModel_created_at(ctx context.Context, field graphql.CollectedField, obj *model.ReportModel) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ReportModel",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNDateTime2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ReportModel_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.ReportModel) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ReportModel",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNDateTime2string(ctx, field.Selections, res)
}

func (ec *executionContext) _StandardResponseModel_success(ctx context.Context, field graphql.CollectedField, obj *model.StandardResponseModel) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "StandardResponseModel",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Success, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _StandardResponseModel_message(ctx context.Context, field graphql.CollectedField, obj *model.StandardResponseModel) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "StandardResponseModel",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ThreadModel_id(ctx context.Context, field graphql.CollectedField, obj *model.ThreadModel) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ThreadModel",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ThreadModel_pinned_comment_id(ctx context.Context, field graphql.CollectedField, obj *model.ThreadModel) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ThreadModel",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PinnedCommentID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ThreadModel_subscribed_users_ids(ctx context.Context, field graphql.CollectedField, obj *model.ThreadModel) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ThreadModel",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubscribedUsersIds, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _ThreadModel_pinned_comment(ctx context.Context, field graphql.CollectedField, obj *model.ThreadModel) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ThreadModel",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PinnedComment, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CommentModel)
	fc.Result = res
	return ec.marshalOCommentModel2ᚖlasthurrahᚋgraphᚋmodelᚐCommentModel(ctx, field.Selections, res)
}

func (ec *executionContext) _ThreadModel_thread_comments(ctx context.Context, field graphql.CollectedField, obj *model.ThreadModel) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ThreadModel",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_ThreadModel_thread_comments_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ThreadComments, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.FetchCommentByThreadIDResponse)
	fc.Result = res
	return ec.marshalNFetchCommentByThreadIdResponse2ᚖlasthurrahᚋgraphᚋmodelᚐFetchCommentByThreadIDResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _UserModel_id(ctx context.Context, field graphql.CollectedField, obj *model.UserModel) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserModel",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_locations(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Locations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalN__DirectiveLocation2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_isRepeatable(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsRepeatable, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_type(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_type(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_types(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Types(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_queryType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QueryType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_mutationType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MutationType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubscriptionType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_directives(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Directives(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Directive)
	fc.Result = res
	return ec.marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_kind(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Kind(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalN__TypeKind2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_fields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field___Type_fields_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fields(args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Field)
	fc.Result = res
	return ec.marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_interfaces(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Interfaces(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_possibleTypes(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PossibleTypes(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_enumValues(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field___Type_enumValues_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnumValues(args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.EnumValue)
	fc.Result = res
	return ec.marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_inputFields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InputFields(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_ofType(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OfType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

func (ec *executionContext) unmarshalInputApproveCommentsInput(ctx context.Context, obj interface{}) (model.ApproveCommentsInput, error) {
	var it model.ApproveCommentsInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "comment_ids":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("comment_ids"))
			it.CommentIds, err = ec.unmarshalNString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputChangeCommentSettingsInput(ctx context.Context, obj interface{}) (model.ChangeCommentSettingsInput, error) {
	var it model.ChangeCommentSettingsInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "comment_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("comment_id"))
			it.CommentID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "reply_notification":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reply_notification"))
			it.ReplyNotification, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCommentsByUserIdInput(ctx context.Context, obj interface{}) (model.CommentsByUserIDInput, error) {
	var it model.CommentsByUserIDInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "user_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user_id"))
			it.UserID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateCommentInput(ctx context.Context, obj interface{}) (model.CreateCommentInput, error) {
	var it model.CreateCommentInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "plain_text_body":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("plain_text_body"))
			it.PlainTextBody, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "json_body":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("json_body"))
			it.JSONBody, err = ec.unmarshalNJSON2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "application_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("application_id"))
			it.ApplicationID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "thread_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("thread_id"))
			it.ThreadID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateReplyCommentInput(ctx context.Context, obj interface{}) (model.CreateReplyCommentInput, error) {
	var it model.CreateReplyCommentInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "plain_text_body":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("plain_text_body"))
			it.PlainTextBody, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "json_body":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("json_body"))
			it.JSONBody, err = ec.unmarshalNJSON2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "application_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("application_id"))
			it.ApplicationID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "thread_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("thread_id"))
			it.ThreadID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "parent_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parent_id"))
			it.ParentID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "replied_to_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("replied_to_id"))
			it.RepliedToID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateReportInput(ctx context.Context, obj interface{}) (model.CreateReportInput, error) {
	var it model.CreateReportInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "comment_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("comment_id"))
			it.CommentID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "report":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("report"))
			it.Report, err = ec.unmarshalNREPORT_REASON2lasthurrahᚋgraphᚋmodelᚐReportReason(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDeleteManyCommentsInput(ctx context.Context, obj interface{}) (model.DeleteManyCommentsInput, error) {
	var it model.DeleteManyCommentsInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "comment_ids":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("comment_ids"))
			it.CommentIds, err = ec.unmarshalNString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "permanent_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("permanent_delete"))
			it.PermanentDelete, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFetchCommentAndVoteCountInput(ctx context.Context, obj interface{}) (model.FetchCommentAndVoteCountInput, error) {
	var it model.FetchCommentAndVoteCountInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "user_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user_id"))
			it.UserID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFetchCommentByThreadIdInput(ctx context.Context, obj interface{}) (model.FetchCommentByThreadIDInput, error) {
	var it model.FetchCommentByThreadIDInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "limit":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
			it.Limit, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "skip":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("skip"))
			it.Skip, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "sort":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sort"))
			it.Sort, err = ec.unmarshalNsort2lasthurrahᚋgraphᚋmodelᚐSort(ctx, v)
			if err != nil {
				return it, err
			}
		case "thread_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("thread_id"))
			it.ThreadID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "application_short_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("application_short_name"))
			it.ApplicationShortName, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFetchCommentsByApplicationIdInput(ctx context.Context, obj interface{}) (model.FetchCommentsByApplicationIDInput, error) {
	var it model.FetchCommentsByApplicationIDInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "limit":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
			it.Limit, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "skip":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("skip"))
			it.Skip, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "sort":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sort"))
			it.Sort, err = ec.unmarshalOsort2ᚖlasthurrahᚋgraphᚋmodelᚐSort(ctx, v)
			if err != nil {
				return it, err
			}
		case "application_short_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("application_short_name"))
			it.ApplicationShortName, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "application_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("application_id"))
			it.ApplicationID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFetchCommentsByApplicationShortNameInput(ctx context.Context, obj interface{}) (model.FetchCommentsByApplicationShortNameInput, error) {
	var it model.FetchCommentsByApplicationShortNameInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "limit":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
			it.Limit, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "skip":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("skip"))
			it.Skip, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "sort":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sort"))
			it.Sort, err = ec.unmarshalOsort2ᚖlasthurrahᚋgraphᚋmodelᚐSort(ctx, v)
			if err != nil {
				return it, err
			}
		case "application_short_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("application_short_name"))
			it.ApplicationShortName, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "where":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
			it.Where, err = ec.unmarshalNwhere2lasthurrahᚋgraphᚋmodelᚐWhere(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFetchThreadCommentsBySort(ctx context.Context, obj interface{}) (model.FetchThreadCommentsBySort, error) {
	var it model.FetchThreadCommentsBySort
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "limit":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
			it.Limit, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "skip":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("skip"))
			it.Skip, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "sort":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sort"))
			it.Sort, err = ec.unmarshalOsort2ᚖlasthurrahᚋgraphᚋmodelᚐSort(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateCommentInput(ctx context.Context, obj interface{}) (model.UpdateCommentInput, error) {
	var it model.UpdateCommentInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "plain_text_body":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("plain_text_body"))
			it.PlainTextBody, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "json_body":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("json_body"))
			it.JSONBody, err = ec.unmarshalNJSON2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "comment_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("comment_id"))
			it.CommentID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var applicationModelImplementors = []string{"ApplicationModel"}

func (ec *executionContext) _ApplicationModel(ctx context.Context, sel ast.SelectionSet, obj *model.ApplicationModel) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, applicationModelImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ApplicationModel")
		case "id":
			out.Values[i] = ec._ApplicationModel_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "moderators_ids":
			out.Values[i] = ec._ApplicationModel_moderators_ids(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "authenticated_users_ids":
			out.Values[i] = ec._ApplicationModel_authenticated_users_ids(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "comments":
			out.Values[i] = ec._ApplicationModel_comments(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var commentAndVoteCountEntityImplementors = []string{"CommentAndVoteCountEntity"}

func (ec *executionContext) _CommentAndVoteCountEntity(ctx context.Context, sel ast.SelectionSet, obj *model.CommentAndVoteCountEntity) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commentAndVoteCountEntityImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CommentAndVoteCountEntity")
		case "comment_count":
			out.Values[i] = ec._CommentAndVoteCountEntity_comment_count(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "vote_count":
			out.Values[i] = ec._CommentAndVoteCountEntity_vote_count(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var commentModelImplementors = []string{"CommentModel"}

func (ec *executionContext) _CommentModel(ctx context.Context, sel ast.SelectionSet, obj *model.CommentModel) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commentModelImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CommentModel")
		case "ID":
			out.Values[i] = ec._CommentModel_ID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "created_at":
			out.Values[i] = ec._CommentModel_created_at(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updated_at":
			out.Values[i] = ec._CommentModel_updated_at(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "author":
			out.Values[i] = ec._CommentModel_author(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "thread_id":
			out.Values[i] = ec._CommentModel_thread_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "parent_id":
			out.Values[i] = ec._CommentModel_parent_id(ctx, field, obj)
		case "PlainTextBody":
			out.Values[i] = ec._CommentModel_PlainTextBody(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "json_body":
			out.Values[i] = ec._CommentModel_json_body(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "up_vote":
			out.Values[i] = ec._CommentModel_up_vote(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "down_vote":
			out.Values[i] = ec._CommentModel_down_vote(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "threatening_content":
			out.Values[i] = ec._CommentModel_threatening_content(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "private_information":
			out.Values[i] = ec._CommentModel_private_information(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleted":
			out.Values[i] = ec._CommentModel_deleted(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "flagged":
			out.Values[i] = ec._CommentModel_flagged(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "pending":
			out.Values[i] = ec._CommentModel_pending(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "approved":
			out.Values[i] = ec._CommentModel_approved(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "replied_to_id":
			out.Values[i] = ec._CommentModel_replied_to_id(ctx, field, obj)
		case "user_id":
			out.Values[i] = ec._CommentModel_user_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "application_id":
			out.Values[i] = ec._CommentModel_application_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "reports":
			out.Values[i] = ec._CommentModel_reports(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "replies":
			out.Values[i] = ec._CommentModel_replies(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "_count":
			out.Values[i] = ec._CommentModel__count(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var countModelImplementors = []string{"CountModel"}

func (ec *executionContext) _CountModel(ctx context.Context, sel ast.SelectionSet, obj *model.CountModel) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, countModelImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CountModel")
		case "up_vote":
			out.Values[i] = ec._CountModel_up_vote(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "down_vote":
			out.Values[i] = ec._CountModel_down_vote(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "replies":
			out.Values[i] = ec._CountModel_replies(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var fetchAllCommentsImplementors = []string{"FetchAllComments"}

func (ec *executionContext) _FetchAllComments(ctx context.Context, sel ast.SelectionSet, obj *model.FetchAllComments) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, fetchAllCommentsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FetchAllComments")
		case "CommentsCount":
			out.Values[i] = ec._FetchAllComments_CommentsCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Comments":
			out.Values[i] = ec._FetchAllComments_Comments(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var fetchCommentByApplicationNameImplementors = []string{"FetchCommentByApplicationName"}

func (ec *executionContext) _FetchCommentByApplicationName(ctx context.Context, sel ast.SelectionSet, obj *model.FetchCommentByApplicationName) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, fetchCommentByApplicationNameImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FetchCommentByApplicationName")
		case "comments_count":
			out.Values[i] = ec._FetchCommentByApplicationName_comments_count(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "comments":
			out.Values[i] = ec._FetchCommentByApplicationName_comments(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var fetchCommentByThreadIdResponseImplementors = []string{"FetchCommentByThreadIdResponse"}

func (ec *executionContext) _FetchCommentByThreadIdResponse(ctx context.Context, sel ast.SelectionSet, obj *model.FetchCommentByThreadIDResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, fetchCommentByThreadIdResponseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FetchCommentByThreadIdResponse")
		case "comments_count":
			out.Values[i] = ec._FetchCommentByThreadIdResponse_comments_count(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "comments":
			out.Values[i] = ec._FetchCommentByThreadIdResponse_comments(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var fetchCommentsByApplicationIdImplementors = []string{"FetchCommentsByApplicationId"}

func (ec *executionContext) _FetchCommentsByApplicationId(ctx context.Context, sel ast.SelectionSet, obj *model.FetchCommentsByApplicationID) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, fetchCommentsByApplicationIdImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FetchCommentsByApplicationId")
		case "comments_count":
			out.Values[i] = ec._FetchCommentsByApplicationId_comments_count(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "comments":
			out.Values[i] = ec._FetchCommentsByApplicationId_comments(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var mutationImplementors = []string{"Mutation"}

func (ec *executionContext) _Mutation(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mutationImplementors)

	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Mutation",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Mutation")
		case "create_comment":
			out.Values[i] = ec._Mutation_create_comment(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "create_reply_comment":
			out.Values[i] = ec._Mutation_create_reply_comment(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "update_comment":
			out.Values[i] = ec._Mutation_update_comment(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "delete_comment":
			out.Values[i] = ec._Mutation_delete_comment(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "delete_many_comments":
			out.Values[i] = ec._Mutation_delete_many_comments(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "change_comment_settings":
			out.Values[i] = ec._Mutation_change_comment_settings(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "up_vote_comment":
			out.Values[i] = ec._Mutation_up_vote_comment(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "down_vote_comment":
			out.Values[i] = ec._Mutation_down_vote_comment(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "create_report":
			out.Values[i] = ec._Mutation_create_report(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "approve_comments":
			out.Values[i] = ec._Mutation_approve_comments(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var profileEntityImplementors = []string{"ProfileEntity"}

func (ec *executionContext) _ProfileEntity(ctx context.Context, sel ast.SelectionSet, obj *model.ProfileEntity) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, profileEntityImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ProfileEntity")
		case "id":
			out.Values[i] = ec._ProfileEntity_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "profile_comments":
			out.Values[i] = ec._ProfileEntity_profile_comments(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var queryImplementors = []string{"Query"}

func (ec *executionContext) _Query(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, queryImplementors)

	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Query",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Query")
		case "fetch_comments_by_thread_id":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_fetch_comments_by_thread_id(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "fetch_comments_by_application_id":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_fetch_comments_by_application_id(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "fetch_comments_by_application_short_name":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_fetch_comments_by_application_short_name(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "fetch_comments":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_fetch_comments(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "fetch_comment_and_vote_count":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_fetch_comment_and_vote_count(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "__type":
			out.Values[i] = ec._Query___type(ctx, field)
		case "__schema":
			out.Values[i] = ec._Query___schema(ctx, field)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var ratingModelImplementors = []string{"RatingModel"}

func (ec *executionContext) _RatingModel(ctx context.Context, sel ast.SelectionSet, obj *model.RatingModel) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, ratingModelImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RatingModel")
		case "id":
			out.Values[i] = ec._RatingModel_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "author_id":
			out.Values[i] = ec._RatingModel_author_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var reportModelImplementors = []string{"ReportModel"}

func (ec *executionContext) _ReportModel(ctx context.Context, sel ast.SelectionSet, obj *model.ReportModel) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, reportModelImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ReportModel")
		case "id":
			out.Values[i] = ec._ReportModel_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "user_id":
			out.Values[i] = ec._ReportModel_user_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "reason":
			out.Values[i] = ec._ReportModel_reason(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "created_at":
			out.Values[i] = ec._ReportModel_created_at(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updated_at":
			out.Values[i] = ec._ReportModel_updated_at(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var standardResponseModelImplementors = []string{"StandardResponseModel"}

func (ec *executionContext) _StandardResponseModel(ctx context.Context, sel ast.SelectionSet, obj *model.StandardResponseModel) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, standardResponseModelImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("StandardResponseModel")
		case "success":
			out.Values[i] = ec._StandardResponseModel_success(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "message":
			out.Values[i] = ec._StandardResponseModel_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var threadModelImplementors = []string{"ThreadModel"}

func (ec *executionContext) _ThreadModel(ctx context.Context, sel ast.SelectionSet, obj *model.ThreadModel) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, threadModelImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ThreadModel")
		case "id":
			out.Values[i] = ec._ThreadModel_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "pinned_comment_id":
			out.Values[i] = ec._ThreadModel_pinned_comment_id(ctx, field, obj)
		case "subscribed_users_ids":
			out.Values[i] = ec._ThreadModel_subscribed_users_ids(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "pinned_comment":
			out.Values[i] = ec._ThreadModel_pinned_comment(ctx, field, obj)
		case "thread_comments":
			out.Values[i] = ec._ThreadModel_thread_comments(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var userModelImplementors = []string{"UserModel"}

func (ec *executionContext) _UserModel(ctx context.Context, sel ast.SelectionSet, obj *model.UserModel) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, userModelImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UserModel")
		case "id":
			out.Values[i] = ec._UserModel_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __DirectiveImplementors = []string{"__Directive"}

func (ec *executionContext) ___Directive(ctx context.Context, sel ast.SelectionSet, obj *introspection.Directive) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __DirectiveImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Directive")
		case "name":
			out.Values[i] = ec.___Directive_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___Directive_description(ctx, field, obj)
		case "locations":
			out.Values[i] = ec.___Directive_locations(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "args":
			out.Values[i] = ec.___Directive_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isRepeatable":
			out.Values[i] = ec.___Directive_isRepeatable(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __EnumValueImplementors = []string{"__EnumValue"}

func (ec *executionContext) ___EnumValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.EnumValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __EnumValueImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__EnumValue")
		case "name":
			out.Values[i] = ec.___EnumValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___EnumValue_description(ctx, field, obj)
		case "isDeprecated":
			out.Values[i] = ec.___EnumValue_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___EnumValue_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __FieldImplementors = []string{"__Field"}

func (ec *executionContext) ___Field(ctx context.Context, sel ast.SelectionSet, obj *introspection.Field) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __FieldImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Field")
		case "name":
			out.Values[i] = ec.___Field_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___Field_description(ctx, field, obj)
		case "args":
			out.Values[i] = ec.___Field_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "type":
			out.Values[i] = ec.___Field_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isDeprecated":
			out.Values[i] = ec.___Field_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___Field_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __InputValueImplementors = []string{"__InputValue"}

func (ec *executionContext) ___InputValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.InputValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __InputValueImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__InputValue")
		case "name":
			out.Values[i] = ec.___InputValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___InputValue_description(ctx, field, obj)
		case "type":
			out.Values[i] = ec.___InputValue_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "defaultValue":
			out.Values[i] = ec.___InputValue_defaultValue(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __SchemaImplementors = []string{"__Schema"}

func (ec *executionContext) ___Schema(ctx context.Context, sel ast.SelectionSet, obj *introspection.Schema) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __SchemaImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Schema")
		case "types":
			out.Values[i] = ec.___Schema_types(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "queryType":
			out.Values[i] = ec.___Schema_queryType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "mutationType":
			out.Values[i] = ec.___Schema_mutationType(ctx, field, obj)
		case "subscriptionType":
			out.Values[i] = ec.___Schema_subscriptionType(ctx, field, obj)
		case "directives":
			out.Values[i] = ec.___Schema_directives(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __TypeImplementors = []string{"__Type"}

func (ec *executionContext) ___Type(ctx context.Context, sel ast.SelectionSet, obj *introspection.Type) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __TypeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Type")
		case "kind":
			out.Values[i] = ec.___Type_kind(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec.___Type_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec.___Type_description(ctx, field, obj)
		case "fields":
			out.Values[i] = ec.___Type_fields(ctx, field, obj)
		case "interfaces":
			out.Values[i] = ec.___Type_interfaces(ctx, field, obj)
		case "possibleTypes":
			out.Values[i] = ec.___Type_possibleTypes(ctx, field, obj)
		case "enumValues":
			out.Values[i] = ec.___Type_enumValues(ctx, field, obj)
		case "inputFields":
			out.Values[i] = ec.___Type_inputFields(ctx, field, obj)
		case "ofType":
			out.Values[i] = ec.___Type_ofType(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) unmarshalNApproveCommentsInput2lasthurrahᚋgraphᚋmodelᚐApproveCommentsInput(ctx context.Context, v interface{}) (model.ApproveCommentsInput, error) {
	res, err := ec.unmarshalInputApproveCommentsInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	res := graphql.MarshalBoolean(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNChangeCommentSettingsInput2lasthurrahᚋgraphᚋmodelᚐChangeCommentSettingsInput(ctx context.Context, v interface{}) (model.ChangeCommentSettingsInput, error) {
	res, err := ec.unmarshalInputChangeCommentSettingsInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNCommentAndVoteCountEntity2lasthurrahᚋgraphᚋmodelᚐCommentAndVoteCountEntity(ctx context.Context, sel ast.SelectionSet, v model.CommentAndVoteCountEntity) graphql.Marshaler {
	return ec._CommentAndVoteCountEntity(ctx, sel, &v)
}

func (ec *executionContext) marshalNCommentAndVoteCountEntity2ᚖlasthurrahᚋgraphᚋmodelᚐCommentAndVoteCountEntity(ctx context.Context, sel ast.SelectionSet, v *model.CommentAndVoteCountEntity) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._CommentAndVoteCountEntity(ctx, sel, v)
}

func (ec *executionContext) marshalNCommentModel2lasthurrahᚋgraphᚋmodelᚐCommentModel(ctx context.Context, sel ast.SelectionSet, v model.CommentModel) graphql.Marshaler {
	return ec._CommentModel(ctx, sel, &v)
}

func (ec *executionContext) marshalNCommentModel2ᚕᚖlasthurrahᚋgraphᚋmodelᚐCommentModelᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.CommentModel) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCommentModel2ᚖlasthurrahᚋgraphᚋmodelᚐCommentModel(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNCommentModel2ᚖlasthurrahᚋgraphᚋmodelᚐCommentModel(ctx context.Context, sel ast.SelectionSet, v *model.CommentModel) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._CommentModel(ctx, sel, v)
}

func (ec *executionContext) marshalNCountModel2ᚖlasthurrahᚋgraphᚋmodelᚐCountModel(ctx context.Context, sel ast.SelectionSet, v *model.CountModel) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._CountModel(ctx, sel, v)
}

func (ec *executionContext) unmarshalNCreateCommentInput2lasthurrahᚋgraphᚋmodelᚐCreateCommentInput(ctx context.Context, v interface{}) (model.CreateCommentInput, error) {
	res, err := ec.unmarshalInputCreateCommentInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCreateReplyCommentInput2lasthurrahᚋgraphᚋmodelᚐCreateReplyCommentInput(ctx context.Context, v interface{}) (model.CreateReplyCommentInput, error) {
	res, err := ec.unmarshalInputCreateReplyCommentInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCreateReportInput2lasthurrahᚋgraphᚋmodelᚐCreateReportInput(ctx context.Context, v interface{}) (model.CreateReportInput, error) {
	res, err := ec.unmarshalInputCreateReportInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNDateTime2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNDateTime2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNDeleteManyCommentsInput2lasthurrahᚋgraphᚋmodelᚐDeleteManyCommentsInput(ctx context.Context, v interface{}) (model.DeleteManyCommentsInput, error) {
	res, err := ec.unmarshalInputDeleteManyCommentsInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNFetchAllComments2lasthurrahᚋgraphᚋmodelᚐFetchAllComments(ctx context.Context, sel ast.SelectionSet, v model.FetchAllComments) graphql.Marshaler {
	return ec._FetchAllComments(ctx, sel, &v)
}

func (ec *executionContext) marshalNFetchAllComments2ᚖlasthurrahᚋgraphᚋmodelᚐFetchAllComments(ctx context.Context, sel ast.SelectionSet, v *model.FetchAllComments) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._FetchAllComments(ctx, sel, v)
}

func (ec *executionContext) unmarshalNFetchCommentAndVoteCountInput2lasthurrahᚋgraphᚋmodelᚐFetchCommentAndVoteCountInput(ctx context.Context, v interface{}) (model.FetchCommentAndVoteCountInput, error) {
	res, err := ec.unmarshalInputFetchCommentAndVoteCountInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNFetchCommentByApplicationName2lasthurrahᚋgraphᚋmodelᚐFetchCommentByApplicationName(ctx context.Context, sel ast.SelectionSet, v model.FetchCommentByApplicationName) graphql.Marshaler {
	return ec._FetchCommentByApplicationName(ctx, sel, &v)
}

func (ec *executionContext) marshalNFetchCommentByApplicationName2ᚖlasthurrahᚋgraphᚋmodelᚐFetchCommentByApplicationName(ctx context.Context, sel ast.SelectionSet, v *model.FetchCommentByApplicationName) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._FetchCommentByApplicationName(ctx, sel, v)
}

func (ec *executionContext) unmarshalNFetchCommentByThreadIdInput2lasthurrahᚋgraphᚋmodelᚐFetchCommentByThreadIDInput(ctx context.Context, v interface{}) (model.FetchCommentByThreadIDInput, error) {
	res, err := ec.unmarshalInputFetchCommentByThreadIdInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNFetchCommentByThreadIdResponse2lasthurrahᚋgraphᚋmodelᚐFetchCommentByThreadIDResponse(ctx context.Context, sel ast.SelectionSet, v model.FetchCommentByThreadIDResponse) graphql.Marshaler {
	return ec._FetchCommentByThreadIdResponse(ctx, sel, &v)
}

func (ec *executionContext) marshalNFetchCommentByThreadIdResponse2ᚖlasthurrahᚋgraphᚋmodelᚐFetchCommentByThreadIDResponse(ctx context.Context, sel ast.SelectionSet, v *model.FetchCommentByThreadIDResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._FetchCommentByThreadIdResponse(ctx, sel, v)
}

func (ec *executionContext) marshalNFetchCommentsByApplicationId2lasthurrahᚋgraphᚋmodelᚐFetchCommentsByApplicationID(ctx context.Context, sel ast.SelectionSet, v model.FetchCommentsByApplicationID) graphql.Marshaler {
	return ec._FetchCommentsByApplicationId(ctx, sel, &v)
}

func (ec *executionContext) marshalNFetchCommentsByApplicationId2ᚖlasthurrahᚋgraphᚋmodelᚐFetchCommentsByApplicationID(ctx context.Context, sel ast.SelectionSet, v *model.FetchCommentsByApplicationID) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._FetchCommentsByApplicationId(ctx, sel, v)
}

func (ec *executionContext) unmarshalNFetchCommentsByApplicationIdInput2lasthurrahᚋgraphᚋmodelᚐFetchCommentsByApplicationIDInput(ctx context.Context, v interface{}) (model.FetchCommentsByApplicationIDInput, error) {
	res, err := ec.unmarshalInputFetchCommentsByApplicationIdInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNFetchCommentsByApplicationShortNameInput2lasthurrahᚋgraphᚋmodelᚐFetchCommentsByApplicationShortNameInput(ctx context.Context, v interface{}) (model.FetchCommentsByApplicationShortNameInput, error) {
	res, err := ec.unmarshalInputFetchCommentsByApplicationShortNameInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNFetchThreadCommentsBySort2lasthurrahᚋgraphᚋmodelᚐFetchThreadCommentsBySort(ctx context.Context, v interface{}) (model.FetchThreadCommentsBySort, error) {
	res, err := ec.unmarshalInputFetchThreadCommentsBySort(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNFloat2float64(ctx context.Context, v interface{}) (float64, error) {
	res, err := graphql.UnmarshalFloat(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNFloat2float64(ctx context.Context, sel ast.SelectionSet, v float64) graphql.Marshaler {
	res := graphql.MarshalFloat(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNInt2int(ctx context.Context, v interface{}) (int, error) {
	res, err := graphql.UnmarshalInt(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNInt2int(ctx context.Context, sel ast.SelectionSet, v int) graphql.Marshaler {
	res := graphql.MarshalInt(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNJSON2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNJSON2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNJSON2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNJSON2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNJSON2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNJSON2string(ctx, sel, v[i])
	}

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalNREPORT_REASON2lasthurrahᚋgraphᚋmodelᚐReportReason(ctx context.Context, v interface{}) (model.ReportReason, error) {
	var res model.ReportReason
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNREPORT_REASON2lasthurrahᚋgraphᚋmodelᚐReportReason(ctx context.Context, sel ast.SelectionSet, v model.ReportReason) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNRatingModel2ᚕᚖlasthurrahᚋgraphᚋmodelᚐRatingModelᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.RatingModel) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNRatingModel2ᚖlasthurrahᚋgraphᚋmodelᚐRatingModel(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNRatingModel2ᚖlasthurrahᚋgraphᚋmodelᚐRatingModel(ctx context.Context, sel ast.SelectionSet, v *model.RatingModel) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._RatingModel(ctx, sel, v)
}

func (ec *executionContext) marshalNReportModel2ᚕᚖlasthurrahᚋgraphᚋmodelᚐReportModelᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.ReportModel) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNReportModel2ᚖlasthurrahᚋgraphᚋmodelᚐReportModel(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNReportModel2ᚖlasthurrahᚋgraphᚋmodelᚐReportModel(ctx context.Context, sel ast.SelectionSet, v *model.ReportModel) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._ReportModel(ctx, sel, v)
}

func (ec *executionContext) marshalNStandardResponseModel2lasthurrahᚋgraphᚋmodelᚐStandardResponseModel(ctx context.Context, sel ast.SelectionSet, v model.StandardResponseModel) graphql.Marshaler {
	return ec._StandardResponseModel(ctx, sel, &v)
}

func (ec *executionContext) marshalNStandardResponseModel2ᚖlasthurrahᚋgraphᚋmodelᚐStandardResponseModel(ctx context.Context, sel ast.SelectionSet, v *model.StandardResponseModel) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._StandardResponseModel(ctx, sel, v)
}

func (ec *executionContext) unmarshalNString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNString2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNString2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNString2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNString2string(ctx, sel, v[i])
	}

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalNUpdateCommentInput2lasthurrahᚋgraphᚋmodelᚐUpdateCommentInput(ctx context.Context, v interface{}) (model.UpdateCommentInput, error) {
	res, err := ec.unmarshalInputUpdateCommentInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNUserModel2ᚖlasthurrahᚋgraphᚋmodelᚐUserModel(ctx context.Context, sel ast.SelectionSet, v *model.UserModel) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._UserModel(ctx, sel, v)
}

func (ec *executionContext) marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx context.Context, sel ast.SelectionSet, v introspection.Directive) graphql.Marshaler {
	return ec.___Directive(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Directive) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalN__DirectiveLocation2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__DirectiveLocation2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalN__DirectiveLocation2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__DirectiveLocation2string(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx context.Context, sel ast.SelectionSet, v introspection.EnumValue) graphql.Marshaler {
	return ec.___EnumValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx context.Context, sel ast.SelectionSet, v introspection.Field) graphql.Marshaler {
	return ec.___Field(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx context.Context, sel ast.SelectionSet, v introspection.InputValue) graphql.Marshaler {
	return ec.___InputValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v introspection.Type) graphql.Marshaler {
	return ec.___Type(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

func (ec *executionContext) unmarshalN__TypeKind2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__TypeKind2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNsort2lasthurrahᚋgraphᚋmodelᚐSort(ctx context.Context, v interface{}) (model.Sort, error) {
	var res model.Sort
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNsort2lasthurrahᚋgraphᚋmodelᚐSort(ctx context.Context, sel ast.SelectionSet, v model.Sort) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNwhere2lasthurrahᚋgraphᚋmodelᚐWhere(ctx context.Context, v interface{}) (model.Where, error) {
	var res model.Where
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNwhere2lasthurrahᚋgraphᚋmodelᚐWhere(ctx context.Context, sel ast.SelectionSet, v model.Where) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalOBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	return graphql.MarshalBoolean(v)
}

func (ec *executionContext) unmarshalOBoolean2ᚖbool(ctx context.Context, v interface{}) (*bool, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalBoolean(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2ᚖbool(ctx context.Context, sel ast.SelectionSet, v *bool) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalBoolean(*v)
}

func (ec *executionContext) marshalOCommentModel2ᚖlasthurrahᚋgraphᚋmodelᚐCommentModel(ctx context.Context, sel ast.SelectionSet, v *model.CommentModel) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CommentModel(ctx, sel, v)
}

func (ec *executionContext) unmarshalOCommentsByUserIdInput2ᚖlasthurrahᚋgraphᚋmodelᚐCommentsByUserIDInput(ctx context.Context, v interface{}) (*model.CommentsByUserIDInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputCommentsByUserIdInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	return graphql.MarshalString(v)
}

func (ec *executionContext) unmarshalOString2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*v)
}

func (ec *executionContext) marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.EnumValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Field) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx context.Context, sel ast.SelectionSet, v *introspection.Schema) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Schema(ctx, sel, v)
}

func (ec *executionContext) marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

func (ec *executionContext) unmarshalOsort2ᚖlasthurrahᚋgraphᚋmodelᚐSort(ctx context.Context, v interface{}) (*model.Sort, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.Sort)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOsort2ᚖlasthurrahᚋgraphᚋmodelᚐSort(ctx context.Context, sel ast.SelectionSet, v *model.Sort) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

// endregion ***************************** type.gotpl *****************************
